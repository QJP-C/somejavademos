<?xml version="1.0" encoding="UTF-8" ?>  <!--该文件必须顶格 前面不能有空行-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
                        <!--主键自增-->
<mapper namespace="com.qjp.mybatis.mapper.DemoMapper">  <!--命名空间指定对应的mapper位置-->
    <!--如果使用的是mysql这样的支持自增主键的数据库，可以简单的使用第一种方式；对于不支持自增主键的数据库，如oracle，则没有主键返回这一概念，
    而需要在插入之前先生成一个主键。此时可以用<selectKey>标签，设置其order属性为BEFORE，并在标签体内写上生成主键的SQL语句，这样在插入之前，
    会先处理<selectKey>，生成主键，再执行真正的插入操作。

    <selectKey>标签其实就是一条SQL，这条SQL的执行，可以放在主SQL执行之前或之后，并且会将其执行得到的结果封装到入参的Java对象的指定属性上。
    注意<selectKey>子标签只能用在<insert>和<update>标签中。上面的LAST_INSERT_ID()实际上是MySQL提供的一个函数，可以用来获取最近插入或更新的记录的主键id。-->

    <insert id="insert1" parameterType="com.qjp.mybatis.po.Student" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO student (name,score,age,gender) VALUES (#{name},#{score},#{age},#{gender});
    </insert>


    <insert id="insert2" parameterType="com.qjp.mybatis.po.Student">
        INSERT INTO student (name,score,age,gender) VALUES (#{name},#{score},#{age},#{gender});
        <selectKey keyProperty="id" order="AFTER" resultType="int" >
            SELECT LAST_INSERT_ID();
        </selectKey>
    </insert>

    <!--批量查询-->
    <!--主要是动态SQL标签的使用，注意如果parameterType是List的话，则在标签体内引用这个List，只能用变量名list，如果parameterType是数组，则只能用变量名array-->
    <select id="batchFind" resultType="student" parameterType="java.util.List">
        SELECT * FROM student
        <where>
            <if test="list != null and list.size() > 0">
                AND id in
                <foreach collection="list" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>

    <!--动态SQL-->
        <!--if-->
    <select id="find" resultType="student" parameterType="student">
        SELECT * FROM student WHERE age >= 18
        <if test="name != null and name != ''">  <!--当满足test条件时，才会将<if>标签内的SQL语句拼接上去-->
            AND name like '%${name}%'
        </if>
    </select>

        <!-- choose 和 when , otherwise 是配套标签 类似于java中的switch，只会选中满足条件的一个-->
    <select id="find1" resultType="student">
        SELECT * FROM student WHERE gender >= 2
        <choose>
            <when test="name != null">   /*if*/
                AND name like #{name}
            </when>
            <when test="age != null and score >= 10">     /*else if*/
                AND  like #{author.name}
            </when>
            <otherwise>      /*else*/
                AND gender = 1
            </otherwise>
        </choose>
    </select>

        <!--trim-->
            <!--where-->
            <!--<where>标签只会在至少有一个子元素返回了SQL语句时，才会向SQL语句中添加WHERE，并且如果WHERE之后是以AND或OR开头，会自动将其删掉-->
    <select id="find2" resultType="student">
        SELECT * FROM student
        <where>
            <if test="name != null">
                name = #{name}
            </if>
            <if test="gender != null">
                AND gender = #{gender}
            </if>
        </where>
        <!--<where>标签可以用<trim>标签代替-->
        <trim prefix="WHERE" prefixOverrides="AND | OR">
        </trim>
    </select>

            <!--set-->
            <!--在至少有一个子元素返回了SQL语句时，才会向SQL语句中添加SET，并且如果SET之后是以,开头的话，会自动将其删掉-->
            <!--<set>标签相当于如下的<trim>标签-->
    <update id="update1" parameterType="student">
        UPDATE student
        <set>
            <if test="gender != 1">
                age = age + 1
            </if>
        </set>
    </update>

        <!--foreach-->
        <!--用来做迭代拼接的，通常会与SQL语句中的IN查询条件结合使用，注意，到parameterType为List（链表）或者Array（数组），
        后面在引用时，参数名必须为list或者array。如在foreach标签中，collection属性则为需要迭代的集合，由于入参是个List，所以参数名必须为list-->
    <select id="batchFind1" resultType="student" parameterType="list">
        SELECT * FROM student WHERE id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

        <!--sql-->
        <!--可将重复的SQL片段提取出来，然后在需要的地方，使用<include>标签进行引用-->
    <select id="findUser" parameterType="student" resultType="student">
        SELECT * FROM student
        <include refid="whereClause"/>
    </select>

    <sql id="whereClause">
        <where>
            <if test="student != null">
                AND name like '%${name}%'
            </if>
        </where>
    </sql>


        <!--bind-->
        <!--mybatis的动态SQL都是用OGNL表达式进行解析的，如果需要创建OGNL表达式以外的变量，可以用bind标签-->
    <select id="selectBlogsLike" resultType="student">
        <bind name="pattern" value="'%' + _parameter.getTitle() + '%'" />
        SELECT * FROM student
        WHERE student.name LIKE #{name}
    </select>

</mapper>

